name: Process Watering Records

on:
  issues:
    types: [opened, edited, deleted, closed, reopened, labeled, unlabeled]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  process-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Create data directory if not exists
        run: mkdir -p data
      
      - name: Process Issues to JSON
        run: |
          # 创建处理脚本
          cat > process-issues.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          async function fetchIssues() {
            const owner = process.env.GITHUB_REPOSITORY.split('/')[0];
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            const token = process.env.GITHUB_TOKEN;
            
            let allIssues = [];
            let page = 1;
            let hasMore = true;
            
            while (hasMore) {
              const response = await fetch(
                `https://api.github.com/repos/${owner}/${repo}/issues?state=all&labels=watering-record&per_page=100&page=${page}`,
                {
                  headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                }
              );
              
              if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status}`);
              }
              
              const issues = await response.json();
              
              if (issues.length === 0) {
                hasMore = false;
              } else {
                allIssues = allIssues.concat(issues);
                page++;
              }
            }
            
            return allIssues;
          }
          
          function parseIssueBody(body) {
            const record = {};
            
            // 解析花卉种类
            const typeMatch = body.match(/\*\*花卉种类\*\*:\s*(.*?)(?:\n|$)/);
            if (typeMatch) record.type = typeMatch[1].trim();
            
            // 解析浇水日期
            const dateMatch = body.match(/\*\*浇水日期\*\*:\s*(.*?)(?:\n|$)/);
            if (dateMatch) record.date = dateMatch[1].trim();
            
            // 解析记录人
            const userMatch = body.match(/\*\*记录人\*\*:\s*(.*?)(?:\n|$)/);
            if (userMatch) record.user = userMatch[1].trim();
            
            // 解析时间戳
            const timestampMatch = body.match(/\*\*时间戳\*\*:\s*(.*?)(?:\n|$)/);
            if (timestampMatch) record.timestamp = timestampMatch[1].trim();
            
            // 解析记录ID
            const idMatch = body.match(/\*\*记录ID\*\*:\s*(.*?)(?:\n|$)/);
            if (idMatch) record.id = idMatch[1].trim();
            else record.id = Date.now().toString();
            
            return record;
          }
          
          async function main() {
            try {
              // 获取所有带有watering-record标签的issue
              const issues = await fetchIssues();
              console.log(`Found ${issues.length} issues with watering-record label`);
              
              // 只处理打开的issue
              const openIssues = issues.filter(issue => issue.state === 'open');
              console.log(`Processing ${openIssues.length} open issues`);
              
              // 解析每个issue的内容
              const records = openIssues.map(issue => {
                const record = parseIssueBody(issue.body);
                record.issue_number = issue.number;
                record.issue_url = issue.html_url;
                return record;
              });
              
              // 按时间戳排序（最新的在前）
              records.sort((a, b) => {
                return new Date(b.timestamp) - new Date(a.timestamp);
              });
              
              // 写入JSON文件
              fs.writeFileSync(
                path.join('data', 'records.json'),
                JSON.stringify(records, null, 2)
              );
              
              console.log(`Successfully wrote ${records.length} records to data/records.json`);
            } catch (error) {
              console.error('Error processing issues:', error);
              process.exit(1);
            }
          }
          
          main();
          EOF
          
          # 运行脚本
          node process-issues.js
      
      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add data/records.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update records from issues" && git push)
